local BattleEventUtils  = require "GameLogic.Battle.BattleEvent.BattleEventUtils"
local BattleEnum        = require "GameLogic.Battle.BattleEnum"
local BulletBase        = require "GameLogic.Battle.SkillSystem.Bullets.BulletBase"
local BattleConstant    = require "GameLogic.Battle.BattleConstant"
---@class TargetBackBullet:BulletBase
local TargetBackBullet  = class("TargetBackBullet", BulletBase)
local M                 = TargetBackBullet
local recessionSpeed    = 0.2
local recessionSpeedMax = 10
function M:_onInitialize(targetList)
    self.moveLogic = self.config.moveLogic
    self.moveSpeed = self.config.missleSpd
    self.moveTimeFrame = self.config.missleTime or 0
    self.moveTimeFrame = math.ceil(self.moveTimeFrame * BattleConstant.FPS / BattleConstant.LogicBaseFPS)
    self.frameMoveDic = self:_initFrameMoveDic()

    --- 计数器
    self.backFrameIndex = 1
    self.backTargetPos = Vector3.zero
    self.stageIndex = 1
    -- BattleLogger.log_error(self.frameMoveDic)
    -- self.frameMoveDic = 1
    self.isCanUpdate = true
    self.lastMoveVec = nil
    self:_createRenderBullet()
end

function M:_createRenderBullet()
    BattleEventUtils:DisPath_CreateEff_pos(self:GetEntityId(), self.position)
    self.initY = self.position.y
end

--- 处理每帧的位置
function M:_onUpdate(deltaTime)
    if self.isCanUpdate then
        self:_handleMove()
        self:_handleEvent()
    end
end

function M:_handleEvent()
    local triggerType = self.config.triggerType
    if triggerType == nil then
        return
    end
    if triggerType == BattleEnum.BulletTriggerType.FrameTrigger then
        self:_executeActionsOnFrame(self.frameCount)
    elseif triggerType == BattleEnum.BulletTriggerType.OnTriggerEnter then
        -- self:_executeActionsOnTrigger(self.frameCount)
    else

    end
end

function M:_onClear()

end

----------------------------------------------------------------------
---

function M:_initFrameMoveDic()
    if self.moveSpeed > 0 then
        local sizeMin = self.hostCharacter:GetBattleContext():GetMapController().cellSizeMin
        local dis = 2 * sizeMin
        dis = dis * self.moveSpeed
        return dis / self.hostCharacter:GetBattleContext():GetBattleManager():GetLogicFPS()
    else
        if self.moveTimeFrame > 0 then
            local targetCharacter = self.hostCharacter:GetBattleContext():GetCharacterManager():GetCharacterById(self
                .targetId)
            if targetCharacter then
                if not targetCharacter:CheckIsDied() then
                    local selfPos = self.position
                    local targetPos = targetCharacter:GetTransform():GetRenderPos()
                    local tarTmp = Vector3(targetPos.x, self.initY, targetPos.z)
                    local dis = Vector3.Distance(tarTmp, selfPos)
                    return dis / self.moveTimeFrame
                else
                    self.hostCharacter:GetStepManager():RemoveBullet(self)
                end
            else
                self.hostCharacter:GetStepManager():RemoveBullet(self)
            end
        else
            Battle.log_Error("非法 速度参数  ", self.config.skillId)
        end
    end

    --    self.moveVec = Vector3.Normalize(self._targetWorldPos - _pos) * self.frameSpeed
end

function M:_handleMove(deltaTime)
    if self.stageIndex == 1 then
        self:_updateToTarget(deltaTime)
    elseif self.stageIndex == 2 then
        self:_updateToBack_1()
    elseif self.stageIndex == 3 then
        self:_updateToBack_2()
    else
        -- nothing to do
    end
end

function M:_updateToTarget(deltaTime)
    local tragetCharacter = self.hostCharacter:GetBattleContext():GetCharacterManager():GetCharacterById(self.targetId)
    if tragetCharacter then
        if not tragetCharacter:CheckIsDied() then
            local selfPos = self.position
            local targetPos = tragetCharacter:GetTransform():GetRenderPos()
            local tarTmp = Vector3(targetPos.x, self.initY + targetPos.y, targetPos.z)
            local dis = Vector3.Distance(tarTmp, selfPos)
            if dis <= 0.3 then
                if self.lastMoveVec == nil then
                    self.lastMoveVec = Vector3.Normalize(tarTmp - selfPos)
                end
                self:_executeActionsOnTrigger()
                local normal = self.lastMoveVec * 1
                self.backTargetPos = tarTmp + normal
                -- self.isCanUpdate = false
                -- self.hostCharacter:GetStepManager():RemoveBullet(self)
                self.stageIndex = 2
            else
                local nomalVec = Vector3.Normalize(tarTmp - selfPos)
                self.lastMoveVec = nomalVec
                local frameVec = nomalVec * self.frameMoveDic
                local newPos = selfPos + frameVec
                if dis < self.frameMoveDic then
                    newPos = tarTmp
                end
                self.position = newPos
                --- todo  临时数据
                -- local renderPos = self.position + Vector3(0, 0.5, 0)
                -- BattleEventUtils:DisPath_SynsRotate(self:GetEntityId(), renderPos)
                BattleEventUtils:DisPath_SynsPos(self:GetEntityId(), self.position)
            end
        else
            local nomalVec = self.lastMoveVec
            if nomalVec == nil then
                self.hostCharacter:GetStepManager():RemoveBullet(self)
            else
                local selfPos = self.position
                local frameVec = nomalVec * self.frameMoveDic
                local newPos = selfPos + frameVec
                self.position = newPos
                --- todo  临时数据
                -- local renderPos = self.position + Vector3(0, 0.5, 0)
                -- BattleEventUtils:DisPath_SynsRotate(self:GetEntityId(), renderPos)
                BattleEventUtils:DisPath_SynsPos(self:GetEntityId(), self.position)
            end
        end
    else
        self.hostCharacter:GetStepManager():RemoveBullet(self)
    end
end

function M:_updateToBack_1()
    local selfPos = self.position
    local targetPos = self.backTargetPos
    local dis = Vector3.Distance(targetPos, selfPos)
    if dis <= 0.2 then
        self.stageIndex = 3
    else
        local nomalVec = Vector3.Normalize(targetPos - selfPos)
        self.lastMoveVec = nomalVec
        local frameVec = nomalVec * self.frameMoveDic * (1 / self.backFrameIndex)
        local newPos = selfPos + frameVec
        if dis < self.frameMoveDic then
            newPos = targetPos
        end
        self.position = newPos
        self.backFrameIndex = self.backFrameIndex + recessionSpeed
        self.backFrameIndex = self.backFrameIndex > recessionSpeedMax and recessionSpeedMax or self.backFrameIndex
        -- BattleEventUtils:DisPath_SynsRotate(self:GetEntityId(), renderPos)
        BattleEventUtils:DisPath_SynsPos(self:GetEntityId(), self.position)
    end
end

function M:_updateToBack_2()
    local selfPos = self.position
    local targetPos = self.hostCharacter:GetTransform():GetRenderPos()
    local tarTmp = Vector3(targetPos.x, self.initY + targetPos.y, targetPos.z)
    local dis = Vector3.Distance(tarTmp, selfPos)
    if dis <= 0.3 then
        self.isCanUpdate = false
        self.hostCharacter:GetStepManager():RemoveBullet(self)
    else
        local nomalVec = Vector3.Normalize(tarTmp - selfPos)
        self.lastMoveVec = nomalVec
        local frameVec = nomalVec * self.frameMoveDic * (1 / self.backFrameIndex)
        local newPos = selfPos + frameVec
        if dis < self.frameMoveDic then
            newPos = tarTmp
        end
        self.position = newPos
        self.backFrameIndex = self.backFrameIndex - recessionSpeed
        self.backFrameIndex = self.backFrameIndex < 1 and 1 or self.backFrameIndex
        -- BattleEventUtils:DisPath_SynsRotate(self:GetEntityId(), renderPos)
        BattleEventUtils:DisPath_SynsPos(self:GetEntityId(), self.position)
    end
end

function M:_updateToBack_3()

end

return M
