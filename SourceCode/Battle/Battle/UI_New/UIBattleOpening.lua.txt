----------------------------------------------------------------------
--------- 2023年01月04日 10:55:52 星期三
----------------------------------------------------------------------
local UIVideoPlayer = require "GameLogic.CommonUI.Component.UIVideoPlayer"
---@class UIBattleOpening
local UIBattleOpening = class("UIBattleOpening", UIPanel)
local M = UIBattleOpening

function M:GetConfigAssetPath()
    return UIPanelAsset.UIBattleOpening
end

function M:GetPanelConfig()
    return UIPanelConfig.Default_Default
end

------UIPanel生命周期 start------
-- { customId = self.battleData.targetId, battleContext = self.battleContext })
function M:OnParse(params)
    self.isLoadFinish = false
    self.startAniPlayFinish = false
end

function M:OnCreate()

end

function M:OnAddListener()
    BroadcastEvent.subscribe(BattleEventId.Event_Battle_Render_LoadFinish, self.LoadFinish, self)
end

function M:OnRemoveListener()
    BroadcastEvent.unsubscribe(BattleEventId.Event_Battle_Render_LoadFinish, self.LoadFinish, self)
end

------UIPanel生命周期 end------
function M:OnShow()

end

---销毁前清理
function M:OnDispose()
    if self.delayTimer then
        self.delayTimer:Dispose()
        self.delayTimer = nil
    end
    if self.delayTimerVideo then
        self.delayTimerVideo:Dispose()
        self.delayTimerVideo = nil
    end
    Game.SystemManager.UWAssetManager:unloadGUid(self.gUid_eff_star)
    if self._gUid_video then
        Game.SystemManager.UWAssetManager:unloadGUid(self._gUid_video)
    end
end

function M:OnRefresh()
    self:Init()
end

function M:Init()
    self:LoadEff()
    self:CloseSelf()
end

function M:OnOpen()
    self:OpenAni()
end

function M:OpenAni()
    self._Main:Play("UIBattleOpening")
end

function M:LoadEff()
    self.gUid_eff_star = Game.SystemManager.UWAssetManager:loadResourceAsync(
        "Assets/GameAsset/Effects/UIEffect/Prefab/eff_ui_battle_vs_star.prefab",
        function(go, gUid)
            if go then
                go.transform:SetParent(self._go_eff_root.transform)
            end
        end)
end

function M:CloseAni()
    BroadcastEvent.dispatch(BattleEventId.Event_Battle_Render_VSFinish)
  
    -- if self._Main then
    --     self._Main:Play("UIPVEPauseViewOut")
    -- end
end

function M:CloseSelf(cb)
    self:AniPlayEnd()
    self:DelayPlayFireVideo()
end

function M:DelayPlayFireVideo()
    if self.delayTimerVideo ~= nil then
        self.delayTimerVideo:reset(0.9, 0, false, false, self.PlayFireVideo, self)
    else
        self.delayTimerVideo = Timer.new(0.9, 0, false, false, self.PlayFireVideo, self)
    end
    self.delayTimerVideo:start()
end

function M:PlayFireVideo()
    -- self.uiVideoPlayer = UIVideoPlayer.new(self._RawImage)
    -- self._gUid_video = Game.SystemManager.UWAssetManager:loadResourceAsync("Assets/GameAsset/Sprites/Video/UI_battle_vsvideo1.mp4", function(asset, guid)
    --     self.uiVideoPlayer.gameObject:SetActive(true)
    --     self.uiVideoPlayer:init(asset, false)
    --     self.uiVideoPlayer:play()
    -- end)
end

function M:OnLoadVideoCompleted(asset, gUid)

end

function M:AniPlayEnd()
    if self.delayTimer ~= nil then
        self.delayTimer:reset(1.6, 0, false, false, self.OnStartAniPlayFinish, self)
    else
        self.delayTimer = Timer.new(1.6, 0, false, false, self.OnStartAniPlayFinish, self)
    end
    self.delayTimer:start()
end

function M:OnStartAniPlayFinish()
    self.startAniPlayFinish = true
    self:TryClose()
end

function M:LoadFinish()
    self.isLoadFinish = true
    self:TryClose()
end

function M:TryClose()
    if self.isLoadFinish and self.startAniPlayFinish then
        self:CloseAni()
    end
end

return M
