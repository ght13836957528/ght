----------------------------------------------------------------------
--------- 2023年01月30日 11:32:27 星期一
---目标血量百分比治疗
----------------------------------------------------------------------
local BattleEnum = require "GameLogic.Battle.BattleEnum"
local BaseBuff = require "GameLogic.Battle.BuffSystem.BaseBuff"

---@class BuffTargetHPPercentageCure:BaseBuff
local BuffTargetHPPercentageCure = class("BuffTargetHPPercentageCure", BaseBuff)
local M = BuffTargetHPPercentageCure

----------------------------------------------------------------------

function M:_onInitialize()

end

function M:_onEnter()
    self:_doModify()
    -- 接受治疗的事件
    -- BroadcastEvent.dispatch(BattleEventId.MSG_BATTLE_TRIGGER_EVENT, TriggerTimeType.TriggerTime_OnAcceptCure)
end

function M:_onRefresh()

end

function M:_onExit()

end

----------------------------------------------------------------------
function M:_doModify()
    local fromCharacter = self.hostCharacter:GetBattleContext():GetCharacterManager():GetCharacterById(self.fromId)
    --- 自身生命上限
    local hpMax = self.hostCharacter:GetAttribute():GetAttackCurrentValue(BattleEnum.BuffChangeAttributeType
        .AttributeType_HP_1)
    BattleLogger.logNumerical("自身生命上限 : ", hpMax)
    --- 技能系数
    local skill_k = self:skillCoefficient(fromCharacter, self.buffParams)
    BattleLogger.logNumerical("技能系数 : ", skill_k)
    --- 治疗效果提升
    local p1 = fromCharacter:GetAttribute():GetAttackCurrentValue(BattleEnum.BuffChangeAttributeType
        .AttributeType_CurePrompt_31) * 0.01
    BattleLogger.logNumerical("治疗效果提升 : ", p1)
    --- 生命恢复效果加成
    local p2 = self.hostCharacter:GetAttribute():GetAttackCurrentValue(BattleEnum.BuffChangeAttributeType
        .AttributeType_HPRecoverAdd_30) * 0.01
    BattleLogger.logNumerical("生命恢复效果加成 : ", p2)
    ---- 玩法治疗系数
    local play_k = self:IsPlayType(1) and
        ConfigHandler:GetEntry(GameDefine.TableName.Global, "Battle_Heal_Formula_World_Param") or 1
    BattleLogger.logNumerical("玩法治疗系数 : ", play_k)
    --- 威力百分比
    local power_k = self.buffParams[3] or 100
    power_k = power_k * 0.01
    BattleLogger.logNumerical("威力百分比 : ", power_k)


    local result = hpMax * skill_k * p1 * p2 * play_k * power_k
    result = FixedCalculateHandler:keepPoint(result, 0)
    result = result <= 0 and 1 or result
    BattleLogger.logNumerical("目标血量百分比治疗 : ", result)
    -- self.hostCharacter:GetLogicHandle():AcceptDamage(self.fromId,result,self.buffParams[4],self.buffParams[5])
    BattleLogger.log_error("目标血量百分比治疗 ：", result)

    local param5 = self.buffParams[4] or 0
    local tmpResult = result + self.hostCharacter:GetBaseAtt():GetCurrentHpValue()
    local hpBase = self.hostCharacter:GetAttribute():GetAttackCurrentValue(BattleEnum.BuffChangeAttributeType
        .AttributeType_HP_1)
    if param5 == 1 and self.buffParams[5] and tmpResult > hpBase then
        local shield_p = self:CureCoefficient(fromCharacter, self.buffParams[5])
        local turnValue = tmpResult - hpBase
        local shieldValue = turnValue * shield_p
        self.hostCharacter:GetBaseAtt():AddShieldStaticValue(shieldValue, self.fromId)
        BattleLogger.logNumerical("超出治疗量转化护盾 : ", shieldValue)
    end
end

return M
