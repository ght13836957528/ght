--- 收集客户段操作帧
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuyubao.
--- DateTime: 2022/3/1 10:49
---@class FrameControl
local FrameControl = class("FrameControl")

local FrameData = require "GameLogic.Battle.BattleFrame.FrameData"

function FrameControl:Ctor()
    self._frameCount = 0
    ---@type FrameData[][]
    self._map_frameData_client = {}
    ---@type FrameData[][]
    self._map_frameData_server = {}
end

---@param clientFrame FrameData[][]
function FrameControl:Initialize(clientFrame)
    clientFrame = clientFrame or {}
    self:setServerFrameData(clientFrame)
    local zero_frameData = clientFrame[-1] or {}
    local frameArray = zero_frameData.frameData or {}
    for _, frameData in ipairs(frameArray) do
        self:addFrameDataList(FrameData.new(frameData.frame, frameData.eventId, frameData.data))
    end
end

function FrameControl:getBattleFrameData()
    local result = {}
    for frame, dataList in pairs(self._map_frameData_client) do
        local frameArr = {}
        for index, frameData in ipairs(dataList) do
            table.insert(frameArr, {
                frame = frameData._frame,
                eventId = frameData._eventId,
                data = frameData._data,
            })
        end
        result[frame] = {
            frameData = frameArr
        }
    end
    return result
end

function FrameControl:setServerFrameData(data)
    for frame, data in pairs(data) do
        local dataList = data.frameData or {}
        local frameArr = {}
        for _, frameData in ipairs(dataList) do
            table.insert(frameArr, FrameData.new(frameData.frame, frameData.eventId, frameData.data))
        end
        self._map_frameData_server[frame] = frameArr
    end
end

function FrameControl:disPatchEventMsg(eventKey, param)
    -- print("frameTest: disPatchEventMsg : " .. eventKey .. "  frameCount :" .. self._frameCount)
    BroadcastEvent.dispatch(eventKey, param)
    self:addFrameDataList(self:createFrameData(eventKey, param))
end

function FrameControl:createFrameData(eventKey, data)
    return FrameData.new(self._frameCount, eventKey, data)
end

function FrameControl:getFrameDataList(frame)
    return self._map_frameData_client[frame] or {}
end

---@param frameData FrameData
function FrameControl:addFrameDataList(frameData)
    if self._map_frameData_client[frameData._frame] == nil then
        self._map_frameData_client[frameData._frame] = {}
    end
    table.insert(self._map_frameData_client[frameData._frame], frameData)
end

function FrameControl:OnUpdate()
    self._frameCount = self._frameCount + 1
    local frameDataList = self._map_frameData_server[self._frameCount]
    if frameDataList then
        for _, frameData in ipairs(frameDataList) do
            -- print("frameTest: FrameControl OnUpdate: " .. frameData._eventId .. "  frameCount :" .. self._frameCount)
            BroadcastEvent.dispatch(frameData._eventId, frameData._data)
        end
    end
end

function FrameControl:Clear()
    -- todo 释放逻辑
end

return FrameControl
